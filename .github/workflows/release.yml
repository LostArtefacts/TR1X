name: Publish a new release

on:
  push:
    branch: stable
    tags:
    - 'v?[0-9]*'
  workflow_call:
    inputs:
      draft:
        description: 'Draft'
        required: true
        default: false
        type: boolean
      prerelease:
        description: 'Prerelease'
        required: true
        type: boolean
  workflow_dispatch:
    inputs:
      draft:
        description: 'Draft'
        required: true
        default: true
        type: boolean
      prerelease:
        description: 'Prerelease'
        required: true
        default: false
        type: boolean

jobs:
  publish_release:
    name: Create a GitHub release
    runs-on: ubuntu-latest
    needs: [build_game, build_installer]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: .
          fetch-depth: 0

      - name: Download built game asset
        uses: actions/download-artifact@v1
        with:
          path: artifacts/
          name: game

      - name: Download built installer asset
        uses: actions/download-artifact@v1
        with:
          path: artifacts/
          name: installer

      - name: Extract tag name
        id: get_version
        run: echo ::set-output name=VERSION::$(git describe --abbrev=7 --tags)

      - name: Rename assets
        run: |
          mv artifacts/game.zip artifacts/Tomb1Main-${{ steps.get_version.outputs.VERSION }}.zip
          mv artifacts/Tomb1Main_Installer.exe artifacts/Tomb1Main-${{ steps.get_version.outputs.VERSION }}-Installer.exe

      - name: Generate Changelog
        run: python3 -c 'from pathlib import Path; print(Path("CHANGELOG.md").read_text().split("\n\n")[1])' | tail -n -1 > artifacts/changes.txt

      - name: Release
        uses: softprops/action-gh-release@v1
        #if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ github.ref }}
          body_path: artifacts/changes.txt
          draft: ${{ inputs.draft }}
          prerelease: ${{ inputs.prerelease }}
          fail_on_unmatched_files: true
          files: |
            artifacts/Tomb1Main-${{ steps.get_version.outputs.VERSION }}.zip
            artifacts/Tomb1Main-${{ steps.get_version.outputs.VERSION }}-Installer.exe

  build_game:
    name: Build the game
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: .
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make p7zip-full moby-engine moby-cli

      - name: Build the game
        run: |
          make clean release

      - name: Package the game
        run: |
          7z a game.zip ./bin/* ./build/*.exe

      - name: Upload the artifact
        uses: actions/upload-artifact@v1
        with:
          name: game
          path: game.zip

  build_installer:
    name: Build the installer
    needs: [build_game]
    runs-on: windows-latest  # https://github.com/dotnet/runtime/issues/3828
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: .
          fetch-depth: 0

      - name: Download built assets
        uses: actions/download-artifact@v1
        with:
          path: artifacts/
          name: game

      - name: Setup dependencies
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0'

      - name: Build
        run: |
          cp artifacts/game.zip tools/installer/Installer/Resources/release.zip
          cd tools/installer
          dotnet restore
          dotnet publish -c Release -o out

      - name: Upload the artifact
        uses: actions/upload-artifact@v1
        with:
          name: installer
          path: tools/installer/out/Tomb1Main_Installer.exe
